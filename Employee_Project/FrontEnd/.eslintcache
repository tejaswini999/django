[{"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\index.tsx":"1","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\store.ts":"2","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\layout\\App.tsx":"3","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\commonStore.ts":"4","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\modalStore.ts":"5","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\userStore.ts":"6","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\employeeStore.ts":"7","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\layout\\NavBar.tsx":"8","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\layout\\LoadingComponent.tsx":"9","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\home\\HomePage.tsx":"10","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\users\\LoginForm.tsx":"11","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\errors\\NotFound.tsx":"12","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\modals\\ModalContainer.tsx":"13","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\details\\EmpDetails.tsx":"14","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\dashboard\\EmpDashboard.tsx":"15","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\details\\EmpDelete.tsx":"16","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\form\\EmpForm.tsx":"17","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\query\\query.ts":"18","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\api\\agent.ts":"19","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\options\\categoryOptions.ts":"20","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\users\\RegisterForm.tsx":"21","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\dashboard\\EmpList.tsx":"22","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\details\\EmpDetailedHeader.tsx":"23","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\details\\EmpDetailedInfo.tsx":"24","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\form\\MyTextArea.tsx":"25","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\form\\MySelectInput.tsx":"26","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\form\\MyDateInput.tsx":"27","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\form\\MyTextInput.tsx":"28","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\errors\\ValidationErrors.tsx":"29","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\dashboard\\EmpListItem.tsx":"30"},{"size":741,"mtime":1647924957618,"results":"31","hashOfConfig":"32"},{"size":659,"mtime":1647924957599,"results":"33","hashOfConfig":"32"},{"size":2207,"mtime":1647924957599,"results":"34","hashOfConfig":"32"},{"size":1381,"mtime":1647924974472,"results":"35","hashOfConfig":"32"},{"size":516,"mtime":1647924957599,"results":"36","hashOfConfig":"32"},{"size":4042,"mtime":1647924974474,"results":"37","hashOfConfig":"32"},{"size":6473,"mtime":1647924974473,"results":"38","hashOfConfig":"32"},{"size":1247,"mtime":1647924974472,"results":"39","hashOfConfig":"32"},{"size":384,"mtime":1647924957599,"results":"40","hashOfConfig":"32"},{"size":1572,"mtime":1647924974478,"results":"41","hashOfConfig":"32"},{"size":1648,"mtime":1647924974478,"results":"42","hashOfConfig":"32"},{"size":606,"mtime":1647924957617,"results":"43","hashOfConfig":"32"},{"size":491,"mtime":1647924957599,"results":"44","hashOfConfig":"32"},{"size":1216,"mtime":1647924974477,"results":"45","hashOfConfig":"32"},{"size":1325,"mtime":1647924974474,"results":"46","hashOfConfig":"32"},{"size":963,"mtime":1647924974476,"results":"47","hashOfConfig":"32"},{"size":4166,"mtime":1647924974477,"results":"48","hashOfConfig":"32"},{"size":2933,"mtime":1647924974471,"results":"49","hashOfConfig":"32"},{"size":2091,"mtime":1647924974470,"results":"50","hashOfConfig":"32"},{"size":228,"mtime":1647924957599,"results":"51","hashOfConfig":"32"},{"size":2500,"mtime":1647924974479,"results":"52","hashOfConfig":"32"},{"size":827,"mtime":1647924974475,"results":"53","hashOfConfig":"32"},{"size":2072,"mtime":1647924974476,"results":"54","hashOfConfig":"32"},{"size":2048,"mtime":1647924974477,"results":"55","hashOfConfig":"32"},{"size":652,"mtime":1647924957599,"results":"56","hashOfConfig":"32"},{"size":945,"mtime":1647924957599,"results":"57","hashOfConfig":"32"},{"size":790,"mtime":1647924957599,"results":"58","hashOfConfig":"32"},{"size":651,"mtime":1647924957599,"results":"59","hashOfConfig":"32"},{"size":503,"mtime":1647924957618,"results":"60","hashOfConfig":"32"},{"size":1867,"mtime":1647924974475,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"5kt6a1",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\index.tsx",[],["134","135"],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\store.ts",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\layout\\App.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\commonStore.ts",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\modalStore.ts",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\userStore.ts",["136"],"import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { current_user, login_User, refresh_Token, register_user } from \"../common/query/query\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        const  login_Query={\r\n            \"query\":login_User,\r\n                  \"variables\":{\r\n                     \"password\": creds.password,\r\n                    \"username\": creds.username\r\n                        }\r\n               };\r\n        try {\r\n            const user = await agent.API.data(login_Query);\r\n                if(!user.data.data.tokenAuth.success)\r\n                    toast.error(\"Invalid Credentials !\")\r\n                else{\r\n                    toast.success(\"Welcome !!\")\r\n                    store.commonStore.setToken(user.data.data.tokenAuth.token);\r\n                    store.commonStore.setrefreshToken(user.data.data.tokenAuth.refreshToken);\r\n                    runInAction(() => this.user = user.data.data.tokenAuth.user);\r\n                    history.push('/employee');\r\n                    store.modalStore.closeModal();\r\n                    }\r\n            } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        window.localStorage.removeItem('jwt2');\r\n        this.user = null;\r\n        toast.success(\"Thank you for visiting !\")\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        const  currentUser_Query={\"query\": current_user };\r\n        try {\r\n            const user = await agent.API.data(currentUser_Query);\r\n           runInAction(() => this.user = user.data.data.me);\r\n        } catch (error) {\r\n             console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        const  register_Query={\r\n            \"query\":register_user,\r\n                  \"variables\":{\r\n                    \"email\": creds.email,\r\n                     \"password\": creds.password,\r\n                    \"username\": creds.username,\r\n                    \"displayName\": creds.displayName\r\n                        }\r\n               };\r\n        try {\r\n            const user = await agent.API.data(register_Query);\r\n            if(!user.data.data.register)                                   // error\r\n            {                             \r\n                if (user.data.errors[0].message==\"User Already Exists!\")\r\n                       toast.error(\"User Already Exists!\")\r\n            }\r\n            else{\r\n                toast.success('User Registered Sucessfully !')\r\n               store.commonStore.setToken(user.data.data.register.token);\r\n                store.commonStore.setrefreshToken(user.data.data.register.refreshToken);\r\n                runInAction(() => this.user = user.data.data.register.user);\r\n                history.push('/employee');\r\n                store.modalStore.closeModal();\r\n            }\r\n        } \r\n        catch (error:any) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    updateToken = (token:any) =>\r\n  {\r\n    let decodedToken :any= jwt_decode(token);\r\n    var exp_time=decodedToken.exp-decodedToken.origIat-5;      // 5 secs before expiration of token\r\n    const  refreshToken_query={\r\n        \"query\":refresh_Token,\r\n              \"variables\":{\r\n                  \"refreshToken\": store.commonStore.refreshToken\r\n                }\r\n        };\r\n    setTimeout(async ()=>{\r\n        const resp = await agent.API.data(refreshToken_query)\r\n        store.commonStore.setToken(resp.data.data.refreshToken.token)\r\n    },exp_time*1000)\r\n  }\r\n  \r\n}\r\n","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\stores\\employeeStore.ts",["137"],"import { makeAutoObservable, runInAction, toJS } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Employee } from \"../models/employee\";\r\nimport { toast } from \"react-toastify\";\r\nimport { create_employee,delete_employee, get_all_Employees, get_employee, update_employee } from \"../common/query/query\";\r\n\r\nexport default class EmployeeStore {\r\n    employeeRegistry = new Map<number, Employee>();\r\n    selectedEmployee: Employee |undefined =undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get employeesByDate() {\r\n        return Array.from(this.employeeRegistry.values())\r\n       .sort((a, b) =>\r\n       a.empDOJ!.getDate()-b.empDOJ!.getDate()\r\n       )\r\n    }\r\n\r\n    get groupedEmployee() {\r\n        return Object.entries(\r\n            this.employeesByDate.reduce((employees,employee) => {\r\n                const date = this.convertDate(employee.empDOJ);\r\n                employees[date] = employees[date] ? [...employees[date], employee] : [employee];\r\n                return employees;\r\n            }, {} as {[key: string]: Employee[]})\r\n        )\r\n    }\r\n\r\n    loadEmployees = async () => {\r\n        const get_all_Employees_Query = {\"query\":  get_all_Employees };\r\n        this.loadingInitial = true;\r\n        try {\r\n            const employees = await agent.API.data(get_all_Employees_Query);\r\n            employees.data.data.allEmployees.forEach((employee: Employee) => {\r\n                this.setEmployee(employee);\r\n            })\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n             console.log(error);\r\n             this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    loademployee = async (id: number) => {\r\n       let employee = this.getEmloyee(id);\r\n        if (employee) {\r\n            this.selectedEmployee = employee;\r\n            return employee;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            const  get_Employee_Query={\r\n                \"query\": get_employee,\r\n                      \"variables\":{\r\n                          \"empID\": id\r\n                        }\r\n                };\r\n            try {\r\n             const employee= await agent.API.data(get_Employee_Query);\r\n              this.setEmployee(employee.data.data.employees[0]);\r\n                runInAction(() => {\r\n                    this.selectedEmployee=employee.data.data.employees[0];\r\n                })\r\n               this.setLoadingInitial(false);\r\n               return employee.data.data.employees[0];\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n       }\r\n    }\r\n\r\n    private setEmployee = (employee: Employee) => {\r\n        employee.empDOJ = new Date(employee.empDOJ!);\r\n        this.employeeRegistry.set(employee.empID, employee);\r\n    }\r\n\r\n    private getEmloyee = (id: number) => {\r\n    return this.employeeRegistry.get(id)\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    private convertDate(str:any) {           // convert data into format {yyyy-mm-dd}\r\n        var date = new Date(str),\r\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n          day = (\"0\" + date.getDate()).slice(-2);\r\n        return [date.getFullYear(), mnth, day].join(\"-\");\r\n      }\r\n    createEmployee = async (employee: Employee) => {\r\n      const  create_Employee_Query={\r\n        \"query\": create_employee,\r\n              \"variables\":{\r\n                  \"empName\": employee.empName,\r\n                  \"empCity\": employee.empCity,\r\n                  \"empOfficeVenue\": employee.empOfficeVenue,\r\n                   \"empDOJ\": this.convertDate(employee.empDOJ),\r\n                  \"empDescription\": employee.empDescription,                \r\n                  \"empCategory\": employee.empCategory             \r\n                }\r\n        };\r\n        this.loading = true;\r\n        try {\r\n          const emp= await agent.API.data(create_Employee_Query);\r\n            runInAction(() => {\r\n              this.employeeRegistry.set(emp.data.data.createEmployee.employee.empID, emp.data.data.createEmployee.employee);\r\n               this.selectedEmployee = emp.data.data.createEmployee.employee;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n            toast.success(\"Employee Created !\")\r\n            return emp.data.data.createEmployee.employee.empID;\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateEmployee = async (employee: Employee) => {\r\n        const  update_Employee_Query={\r\n            \"query\":update_employee,\r\n              \"variables\":{\r\n                \"empID\": employee.empID,\r\n                \"empName\": employee.empName,\r\n                \"empCity\": employee.empCity,\r\n                \"empOfficeVenue\": employee.empOfficeVenue,\r\n                \"empDOJ\": this.convertDate(employee.empDOJ),\r\n                \"empDescription\": employee.empDescription,                \r\n                \"empCategory\": employee.empCategory             \r\n              }\r\n            };\r\n        this.loading = true;\r\n        try {\r\n           await agent.API.data(update_Employee_Query);\r\n\r\n            runInAction(() => {\r\n                this.employeeRegistry.set(employee.empID, employee);\r\n                this.selectedEmployee = employee;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteemployee = async (id: number) => {\r\n        this.loading = true;\r\n        const  delete_Employee_Query={\r\n            \"query\":delete_employee,\r\n                  \"variables\":{\r\n                      \"empID\": id\r\n                    }\r\n            };\r\n    \r\n        try {\r\n         await agent.API.data(delete_Employee_Query);\r\n            runInAction(() => {\r\n                this.employeeRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n           toast.success(\"Employee Deleted !\")\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\layout\\NavBar.tsx",["138","139"],"import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n  const { userStore: { user, logout } } = useStore();\r\n\r\n  return (\r\n    <Menu inverted fixed=\"top\">\r\n      <Container>\r\n        <Menu.Item as={NavLink} exact to=\"/\" header>\r\n          <img\r\n            src=\"/assets/logo.png\"\r\n            alt=\"logo\"\r\n            style={{ marginRight: \"10px\" }}\r\n          />\r\n          Employees\r\n        </Menu.Item>\r\n        <Menu.Item as={NavLink} to=\"/employee\" name=\"Employees\" />\r\n        <Menu.Item>\r\n          <Button\r\n            as={NavLink}\r\n            to=\"/createEmployee\"\r\n            positive\r\n            content=\"Create Employee\"\r\n          />\r\n        </Menu.Item>\r\n        <Menu.Item position='right'>\r\n          <Dropdown pointing='top left' text={user?.displayName}>\r\n            <Dropdown.Menu>\r\n               <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n             </Dropdown.Menu>\r\n          </Dropdown>\r\n          </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  );\r\n});\r\n","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\layout\\LoadingComponent.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\home\\HomePage.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\users\\LoginForm.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\errors\\NotFound.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\modals\\ModalContainer.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\details\\EmpDetails.tsx",["140","141"],"import { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { Employee } from '../../../app/models/employee';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport EmpDetailedHeader from './EmpDetailedHeader';\r\nimport EmpDetailedInfo from './EmpDetailedInfo';\r\n\r\nexport default observer(function EmployeeDetails() {\r\n    const {empStore} = useStore();\r\n    const {selectedEmployee:employee,loademployee,loadingInitial} = empStore;\r\n    const {id} = useParams<{id: string}>();\r\n \r\n    useEffect(() => {\r\n        if (id)\r\n           loademployee(Number(id))\r\n    }, [id, loademployee]);\r\n\r\n    if (loadingInitial || !employee) return <LoadingComponent />;\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n               <EmpDetailedHeader employee={toJS(employee)} /> \r\n                 <EmpDetailedInfo employee={toJS(employee)} /> \r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\dashboard\\EmpDashboard.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\details\\EmpDelete.tsx",["142","143"],"import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport {  useHistory, useParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nexport default observer(function EmployeeDetails() {\r\n    const history = useHistory();\r\n    const {empStore} = useStore();\r\n    const {deleteemployee,employeeRegistry} = empStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n        if (id)\r\n        {\r\n           await deleteemployee(Number(id));\r\n        } \r\n        else{\r\n            toast.error(\"No Item Selected\")\r\n         }\r\n         window.location.href = \"/employee\"\r\n        })()       \r\n    }, [id, deleteemployee]);\r\n\r\n    return (\r\n        <>\r\n        <LoadingComponent content='Deleting Employee...' />     \r\n       </>\r\n    )\r\n})\r\n\r\n\r\n","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\form\\EmpForm.tsx",["144"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { Employee } from '../../../app/models/employee';\r\nimport { toJS } from 'mobx';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default observer(function EmployeeForm() {\r\n    const history = useHistory();\r\n    const { empStore } = useStore();\r\n    const { createEmployee,updateEmployee,loading,loademployee,loadingInitial } = empStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [employee, setEmployee] = useState<Employee>({\r\n        empID: 0,\r\n        empName: '',\r\n        empDOJ: null,\r\n        empDescription: '',\r\n        empCategory: '',\r\n        empCity: '',\r\n        empOfficeVenue: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        empName: Yup.string().required('The Name is required'),\r\n        empDescription: Yup.string().required('The description is required'),\r\n        empCategory: Yup.string().required(),\r\n        empDOJ: Yup.string().required('Date is required').nullable(),\r\n        empOfficeVenue: Yup.string().required(),\r\n        empCity: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) \r\n        loademployee(Number(id)).then((d)=>setEmployee(toJS(d)))\r\n    }, [id, loademployee]);\r\n\r\n    function handleFormSubmit(employee: Employee) {\r\n        if (employee.empID === 0) {\r\n            let newEmployee = {\r\n                ...employee \r\n            };\r\n            createEmployee(newEmployee).then((id) =>{\r\n                 history.push(`/employee/${id}`)\r\n            }\r\n               )\r\n        } else {\r\n            updateEmployee(employee).then(() => history.push(`/employee/${employee.empID}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading employee...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Employee Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={employee} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='empName' placeholder='Employee Name' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'  \r\n                            name='empDOJ' \r\n                            dateFormat='yyyy-MM-dd'\r\n                        />\r\n                        <MyTextArea rows={3} placeholder='Description' name='empDescription' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='empCategory' />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City'  name='empCity' />\r\n                        <MyTextInput placeholder='Venue' name='empOfficeVenue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={loading} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/employee' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\query\\query.ts",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\api\\agent.ts",["145","146"],"import axios, { AxiosError } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { store } from '../stores/store';\r\nimport { refresh_Token } from '../common/query/query';\r\nimport UserStore from '../stores/userStore';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = 'http://127.0.0.1:8000/graphql';  \r\naxios.defaults.method='post';  \r\n\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\nlet token = localStorage.getItem('jwt');\r\nlet reftoken = localStorage.getItem('jwt2');\r\n\r\nif(token && reftoken )\r\n{\r\n    store.userStore.updateToken(token);\r\n}\r\n    await sleep(1000);\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response! || {};\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst API = {\r\n   data:(query:any) => axios({\r\n     data:query\r\n   }),\r\n}\r\n\r\nconst agent = {\r\n    API\r\n}\r\n\r\nexport default agent;","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\options\\categoryOptions.ts",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\users\\RegisterForm.tsx",["147"],"import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required()\r\n                .min(3, \"Username must be at least 3 characters\")\r\n                .max(20, \"Username must not exceed 20 characters\")            \r\n                .matches(/^[aA-zZ\\s]+$/, \"Only alphabets are allowed\"),\r\n                email: Yup.string().required().email(\"Email is invalid\"),\r\n                password: Yup.string().required() .matches(\r\n                    /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\r\n                    \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n                  ),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\dashboard\\EmpList.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\details\\EmpDetailedHeader.tsx",["148"],"import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image} from 'semantic-ui-react'\r\nimport {Employee} from \"../../../app/models/employee\";\r\nimport {format} from 'date-fns';\r\nimport { toJS } from 'mobx';\r\n\r\nconst employeeImageStyle = {\r\n    filter: 'brightness(50%)'\r\n};\r\n\r\nconst employeeImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    employee: Employee\r\n}\r\n\r\nexport default observer (function EmployeeDetailedHeader({employee}: Props) {\r\n    function convertDate(str:any) {\r\n        var date = new Date(str),\r\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n          day = (\"0\" + date.getDate()).slice(-2);\r\n        return [date.getFullYear(), mnth, day].join(\"-\");\r\n      }\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                <Image src={`/assets/categoryImages/${employee.empCategory}.jpg`} fluid style={employeeImageStyle}/>\r\n                <Segment style={employeeImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={toJS(employee.empName)}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                              <p>  {convertDate(employee.empDOJ)}</p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Button as={Link} to={`/manage/${employee.empID}`} color='orange' floated='right'>\r\n                    Manage\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\details\\EmpDetailedInfo.tsx",["149"],"import { observer } from 'mobx-react-lite';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Employee } from \"../../../app/models/employee\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    employee: Employee\r\n}\r\n\r\nexport default observer(function EmployeeDetailedInfo({ employee }: Props) {\r\n   function convertDate(str:any) {\r\n        var date = new Date(str),\r\n          mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n          day = (\"0\" + date.getDate()).slice(-2);\r\n        return [date.getFullYear(), mnth, day].join(\"-\");\r\n      }\r\n  employee.empDOJ=new Date(convertDate(employee.empDOJ))\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{employee.empDescription}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {convertDate(employee.empDOJ)}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{employee.empOfficeVenue}, {employee.empCity}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\form\\MyTextArea.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\form\\MySelectInput.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\form\\MyDateInput.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\app\\common\\form\\MyTextInput.tsx",[],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\errors\\ValidationErrors.tsx",[],["150","151"],"D:\\1_bcg\\django_app\\Employee_Project\\FrontEnd\\src\\features\\employees\\dashboard\\EmpListItem.tsx",[],{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":79,"column":48,"nodeType":"158","messageId":"159","endLine":79,"endColumn":50},{"ruleId":"160","severity":1,"message":"161","line":1,"column":43,"nodeType":"162","messageId":"163","endLine":1,"endColumn":47},{"ruleId":"160","severity":1,"message":"164","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":14},{"ruleId":"160","severity":1,"message":"165","line":4,"column":35,"nodeType":"162","messageId":"163","endLine":4,"endColumn":40},{"ruleId":"160","severity":1,"message":"166","line":3,"column":28,"nodeType":"162","messageId":"163","endLine":3,"endColumn":36},{"ruleId":"160","severity":1,"message":"167","line":7,"column":10,"nodeType":"162","messageId":"163","endLine":7,"endColumn":18},{"ruleId":"160","severity":1,"message":"168","line":10,"column":11,"nodeType":"162","messageId":"163","endLine":10,"endColumn":18},{"ruleId":"160","severity":1,"message":"169","line":12,"column":27,"nodeType":"162","messageId":"163","endLine":12,"endColumn":43},{"ruleId":"160","severity":1,"message":"170","line":16,"column":10,"nodeType":"162","messageId":"163","endLine":16,"endColumn":15},{"ruleId":"160","severity":1,"message":"171","line":5,"column":10,"nodeType":"162","messageId":"163","endLine":5,"endColumn":23},{"ruleId":"160","severity":1,"message":"172","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":17},{"ruleId":"173","severity":1,"message":"174","line":24,"column":27,"nodeType":"175","messageId":"176","endLine":24,"endColumn":59,"fix":"177"},{"ruleId":"160","severity":1,"message":"178","line":6,"column":9,"nodeType":"162","messageId":"163","endLine":6,"endColumn":15},{"ruleId":"160","severity":1,"message":"178","line":4,"column":9,"nodeType":"162","messageId":"163","endLine":4,"endColumn":15},{"ruleId":"152","replacedBy":"179"},{"ruleId":"154","replacedBy":"180"},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'toJS' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Image' is defined but never used.","'useState' is defined but never used.","'Employee' is defined but never used.","'history' is assigned a value but never used.","'employeeRegistry' is assigned a value but never used.","'toast' is defined but never used.","'refresh_Token' is defined but never used.","'UserStore' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property matches.","MemberExpression","unexpectedWhitespace",{"range":"183","text":"184"},"'format' is defined but never used.",["181"],["182"],"no-global-assign","no-unsafe-negation",[1226,1228],"."]